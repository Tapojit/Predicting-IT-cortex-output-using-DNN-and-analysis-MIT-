%Determines how similar individual channels of response matrix are to respective channels predicted using covariate matrix.
%This is done by calculating explained explainable variance between individual response channels and predicted channels.


classdef Cadieu_RCV < handle
    properties
        beta_trained
        train_test_split
        
        resp_test
        reps
        cores
    end
    
    properties (Access=private)

        cov_data_shape
        resp_data_shape
    end
    
    methods
        %%%%Arguments - Require first two arguments or all%%%%%
        %cov_data = covariate data matrix
        %resp_data = response data matrix
        %Filename = File name where calculated data is stored
        %reps = integer representing number of individual train-test splits carried out
        %train_test_split = float representing proportion of train data cases for each split
        %cores = cores used for parapooling
        %%%%%%Returns%%%%%%%
        %File with name "reliability.mat" which contains in a structure form:
        %%arr=array of explained explainable variance
        %%exp_var=mean explained explainable variance
        %%std_dev=standard deviation of 'arr'
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function obj=Cadieu_RCV(cov_data, resp_data, filename, reps,train_test_split, cores)
            obj.cov_data_shape = size(cov_data);
            obj.resp_data_shape = size(resp_data);
            obj = obj.init();
            
            
            %Shuffling covariate and response matrix
            rng(0);
            cov_data = cov_data(randperm(obj.cov_data_shape(1)), :);
            resp_data = resp_data(randperm(obj.resp_data_shape(1)), :);
            
            if nargin > 3 
                obj.reps = reps;
                obj.cores = cores;
                obj.train_test_split = train_test_split;
                
            else
                reps = obj.reps;
                train_test_split = obj.train_test_split;
            end
            
            betas = zeros(obj.cov_data_shape(2),1, obj.reps, obj.resp_data_shape(2));
            
            exp_var_arr = zeros(1, obj.resp_data_shape(2));            
            
%             parpool(obj.cores);
            
            %Starting loop over response data channels
            for i = 1:obj.resp_data_shape(2)
                
                resp_vec = resp_data(:,i);
                resp_tr = zeros(ceil(train_test_split*size(cov_data,1)),1);
                resp_te = zeros(ceil((1-train_test_split)*size(cov_data,1)),1);
                cov_tr = zeros(ceil(train_test_split*size(cov_data,1)),size(cov_data,2));
                cov_te = zeros(ceil((1-train_test_split)*size(cov_data,1)),size(cov_data,2));
                
                exp_var = zeros(1, reps);
                %Starting loop over train-test reps
                for a = 1:reps
                    split_arr = [zeros(1, ceil(size(cov_data,1)*train_test_split)) ones(1, ceil(obj.cov_data_shape(1)*(1-train_test_split)))];
                    
                    %Generating deterministically training data and test data for current split
                    rng(i);
                    split_arr = split_arr(randperm(numel(split_arr)));
                    
                    train=1;
                    test=1;
                    for m = 1:size(split_arr,2)
                        if split_arr(m) == 0
                            cov_tr(train,:) = cov_data(m,:);
                            resp_tr(train,:) = resp_vec(m,:);
                            train = train + 1;
                        else
                            cov_te(test,:) = cov_data(m,:);
                            resp_te(test,:) = resp_vec(m,:);
                            test = test + 1;
                        end
                    end
                    
                    %Carrying out regression
                    reg_obj = Ridge_RG;
                    reg_obj.train(cov_tr, resp_tr, true);
                    
                    %Storing betas
                    betas(:,:,a,i)=reg_obj.beta;
                    %Making predictions
                    pred_resp = reg_obj.test(cov_te);
                    
                    %Calculating explained variance
                    
                    loss_obj = Explained_variance_LM;
                    exp_var(a) = loss_obj.calculate_loss(pred_resp, resp_te) * 100;                  
                    
                    disp(['Rep ' num2str(a) ' of ' num2str(reps)])
                end
                %Storing median explained variance over all splits/reps for current channel
                exp_var_arr(i) = median(exp_var);                
                
                disp(['Channel ' num2str(i) ' of ' num2str(obj.resp_data_shape(2)) ' done'])
                
            end
            obj.beta_trained = betas;
            %Array of explained explainable variance
            data.arr = exp_var_arr;
            %Mean explained explainable variance over all response matrix channels
            data.exp_var = mean(exp_var_arr);

            %Name of .mat file where data will be saved
            filepath = [filename '.mat'];
            save(filepath,'-struct','data');
            
            
        end
        %Initializes variables and default values
        function obj = init(obj)
            obj.cores = 1;
            obj.reps = 10;
            obj.train_test_split = 0.8;
            obj.beta_trained = zeros(obj.cov_data_shape(2),1, obj.reps, obj.resp_data_shape(2));
        end
        
    end
    
end
